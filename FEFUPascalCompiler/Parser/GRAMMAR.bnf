//*====================================================================================================================*
//#      /$$$$$$$                                        /$$                                                           #
//#     | $$__  $$                                      | $$                                                           #
//#     | $$  \ $$/$$$$$$   /$$$$$$$  /$$$$$$$  /$$$$$$ | $$                                                           #
//#     | $$$$$$$/____  $$ /$$_____/ /$$_____/ |____  $$| $$                                                           #
//#     | $$____/ /$$$$$$$|  $$$$$$ | $$        /$$$$$$$| $$                                                           #
//#     | $$     /$$__  $$ \____  $$| $$       /$$__  $$| $$                                                           #
//#     | $$    |  $$$$$$$ /$$$$$$$/|  $$$$$$$|  $$$$$$$| $$                                                           #
//#     |__/   /$$$$$$___/|_______/  \_______//$$______/|__/                   /$$$$$$                                 #
//#           /$$__  $$                      | $$                             |_  $$_/                                 #
//#          | $$  \__/ /$$   /$$ /$$$$$$$  /$$$$$$   /$$$$$$  /$$   /$$        | $$   /$$$$$$$                        #
//#          |  $$$$$$ | $$  | $$| $$__  $$|_  $$_/  |____  $$|  $$ /$$/        | $$  | $$__  $$                       #
//#           \____  $$| $$  | $$| $$  \ $$  | $$     /$$$$$$$ \  $$$$/         | $$  | $$  \ $$                       #
//#           /$$  \ $$| $$  | $$| $$  | $$  | $$ /$$/$$__  $$  >$$  $$         | $$  | $$  | $$                       #
//#          |  $$$$$$/|  $$$$$$$| $$  | $$  |  $$$$/  $$$$$$$ /$$/\  $$       /$$$$$$| $$  | $$                       #
//#           \______/  \____  $$|__/  |__/   \___/  \_______/|__/  \__/      |______/|__/  |__/                       #
//#                     /$$  | $$                                                                                      #
//#                    |  $$$$$$/                                                                                      #
//# /$$$$$$$$           /$$____/                          /$$                 /$$       /$$$$$$$  /$$   /$$ /$$$$$$$$  #
//#| $$_____/          | $$                              | $$                | $$      | $$__  $$| $$$ | $$| $$_____/  #
//#| $$      /$$   /$$/$$$$$$    /$$$$$$  /$$$$$$$   /$$$$$$$  /$$$$$$   /$$$$$$$      | $$  \ $$| $$$$| $$| $$        #
//#| $$$$$  |  $$ /$$/_  $$_/   /$$__  $$| $$__  $$ /$$__  $$ /$$__  $$ /$$__  $$      | $$$$$$$ | $$ $$ $$| $$$$$     #
//#| $$__/   \  $$$$/  | $$    | $$$$$$$$| $$  \ $$| $$  | $$| $$$$$$$$| $$  | $$      | $$__  $$| $$  $$$$| $$__/     #
//#| $$       >$$  $$  | $$ /$$| $$_____/| $$  | $$| $$  | $$| $$_____/| $$  | $$      | $$  \ $$| $$\  $$$| $$        #
//#| $$$$$$$$/$$/\  $$ |  $$$$/|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$$|  $$$$$$$      | $$$$$$$/| $$ \  $$| $$        #
//#|________/__/  \__/  \___/   \_______/|__/  |__/ \_______/ \_______/ \_______/      |_______/ |__/  \__/|__/        #
//*====================================================================================================================*   
//# RBNF RULES:                                                                                                        #
//#  1.     ::=    -- equal by definition                  ;                                                           #
//#  2.      |     -- or (alternative)                     ;                                                           #
//#  3.     [X]    -- a zero or one entry of X             ;                                                           #
//#  4.     {X}    -- zero and more entries of X           ;                                                           #
//#  5.    (X|Y)   -- group: or X, or Y                    ;                                                           #
//#  6.    "XYZ"   -- terminal sign XYZ                    ;                                                           #
//#  7. <Metaname> -- not terminal sign with name Metaname ;                                                           #                           
//*====================================================================================================================*                                                                                                                             
                                                                                                                                     
<program> ::= "program" <ident>  ";" <main_block> "." 
        
    <main_block> ::= {<declarations_parts>} <compound_statement> 
        <declarations_parts> ::= <const_decls_part>|<type_decls_part>|<variable_decls_part>|<proc_and_func_decls_part>
        
            <const_decls_part> ::= "const" <const_decl> {<const_decl>} 
                <const_decl> ::= <ident> "=" <expression> ";" 
                
            <type_decls_part> ::= "type" <type_decl> {<type_decl>} 
                <type_decl> ::= <ident> "=" <type> ";" 
                        
            <variable_decls_part> ::= "var" <variable_decl> {<variable_decl>} 
                <variable_decl> ::= (<ident_list> ":" <type>) | (<ident> ":" <type> "=" <expression>)
                    
            <proc_and_func_decls_part> ::= {(<proc_decl>|<func_decl>)}
                <proc_decl> ::= <proc_header> ";" <subroutine_block> ";"
                     <proc_header> ::= "procedure" <ident> "(" [<formal_param_list>] ")" 
                    
                <func_decl> ::= <func_header> ";" <subroutine_block> ";"
                    <func_header> ::= "function" <ident> "(" [<formal_param_list>] ")" ":" <simple_type> 
                    
                            <formal_param_list> ::= <formal_param_section> {";" <formal_param_section>}
                                <formal_param_section> ::= [<modifier>] <ident_list> ":" <param_type>
                                    <modifier> ::= "var"|"const"|"out"
                                        <param_type> ::= <simple_type> | <conformant_array>
                                            <conformant_array> ::= "array" "of" <simple_type>
                    <subroutine_block> ::= <block> | "forward"
                        <block> ::= {<const_decls_part>|<type_decls_part>|<variable_decls_part>} <compound_statement>

                        
        <compound_statement> ::= "begin" <statements_part> "end"           
            <statements_part> ::= [<statement> {";" <statement>}]
                <statement> ::= <simple_statement>|<structured_statement>
                
                    <simple_statement> ::= <empty_statement>|<assignment_statement>|<function_call>
                        <empty_statement> ::= "pass"
                        <assignment_statement> ::= <expression> <assignment_symbol> <expression>
                            <assignment_symbol> ::= ":="|"+="|"-="|"*="|"/="
                            
                    <structured_statement> ::= <if_statement>|<loop_statement>|<compound_statement>
                        <if_statement> ::= "if" "(" <expression> ")" "then" <statement> ["else" <statement>]
                        <loop_statement> ::= <while_statement>|<do_while_statement>|<for_statement>
                            <while_statement> ::= "while" <expression> "do" <statement>
                            <do_while_statement> ::= "do" <statement> "while" <expression>
                            <for_statement> ::= "for" <ident> ":=" <for_range> "do" <statement>
                                <for_range> ::= <expression> ("to"|"downto") <expression>
                        
        
<type> ::= <simple_type>|<array_type>|<record_type>|<pointer_type>|<func_signature>|<proc_signature>
    <simple_type> ::= <ident>
    
    <array_type> ::= "array" "[" <index_ranges> "]" "of" <type>
        <index_ranges> ::= <index_range> {"," <index_range>}
            <index_range> ::= <dec_int> ".." <dec_int>
            
    <record_type> ::= "record" [<fields_list>] "end"
        <fields_list> ::= <field_section> {";" <field_section>}
            <field_section> ::= <ident_list> ":" <type>

    <pointer_type> ::= "^" <simple_type> //TODO: ask nastya about pointer on simple type - cause this is ident but what
                                         //TODO: about keywords like char, double, integer array?
    <func_signature> ::= "function" [<formal_param_list>] ":" <simple_type> 
    <proc_signature> ::= "procedure" [<formal_param_list>]
        

<expression> ::= <simple_expr>[<comparing_operator> <simple_expr>]
    <comparing_operator> ::= "<>"|"<"|"<="|">="|">"|"="|"=="
    <simple_expr> ::= <term> [<additive_operator> <term>] 
        <additive_operator> ::= "+"|"-"|"or"|"xor"
        <term> ::= <simple_term> [<multiplying_operator> <simple_term>] 
            <multiplying_operator> ::= "*"|"/"|"div"|"mod"|"and"|"shr"|"shl" 
            <simple_term> ::= [<unary_operator>] <factor>
                <unary_operator> ::= "+"|"-"|"not"|"@"
                <factor> ::= <variable_ref>|("("<expression>")")|<constant>|"nil"
                    <variable_ref> ::= (<ident>|<array_access>|<record_access>|<function_call>)["^"]
                        <array_access> ::= <variable_ref> "[" <expression> {"," <expression>} "]"
                        <record_access> ::= <variable_ref> "." <ident>
                        <function_call> ::= <variable_ref> <param_list>
                            <param_list> ::= "(" [<expression> {"," <expression>}] ")"


<ident_list> ::= <ident> {"," <ident>}
    <ident> ::= <letter> {<letter>|<dec_digit>}
        <letter> ::= "_"|"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|
                     "X"|"Y"|"Z"|"a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|
                     "v"|"w"|"x"|"y"|"z" 
                     
<constant> ::= <int_number>|<number>|<char>|<string>
    <number> ::= <dec_int> {<dec_int>} ["." <dec_int>] [("E"|"e") <dec_int>]
    <char> ::= ("'" <ASCII_sign> "'") | ("#" <dec_int>)
        <ASCII_sign> ::= 42
    <string> ::= "'" <char> {<char>} "'"
    <int_number> ::= <bin_int>|<oct_int>|<dec_int>|<hex_int>
        <bin_int> ::= "%" <bin_digit> {<bin_digit>}
            <bin_digit> ::= "0"|"1"
        <oct_int> ::= "$" <oct_digit> {<oct_digit>}
            <oct_digit> ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"
        <dec_int> ::= <dec_digit> {<dec_digit>}
            <dec_digit> ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
        <hex_int> ::= "%" <hex_digit> {<hex_digit>}
            <hex_digit> ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"|"A"|"B"|"C"|"D"|"E"|"F"